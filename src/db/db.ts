import mysql from 'mysql2/promise';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';

dotenv.config();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

const dbConfig = {
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || 'root',
    database: process.env.DB_NAME || 'fullstack-test-db',
    port: Number(process.env.DB_PORT) || 3306,
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∏–∑ —Ñ–∞–π–ª–∞
const executeSqlFromFile = async (connection: mysql.Connection, filePath: string) => {
    try {
        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        const sqlQuery = fs.readFileSync(filePath, 'utf-8');

        // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
        const queries = sqlQuery.split(';').map(query => query.trim()).filter(query => query.length > 0);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
        for (let query of queries) {
            await connection.query(query);
            console.log('Query executed successfully');
        }
    } catch (error) {
        console.error('Error executing SQL from file:', error);
    }
};

export const connectToDB = async () => {
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const connection = await mysql.createConnection(dbConfig);
        console.log('üöÄ Database connected successfully');

        // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É schema.sql
        const schemaFilePath = path.join(__dirname, 'schema.sql');

        // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞
        await executeSqlFromFile(connection, schemaFilePath);

        return connection;
    } catch (error) {
        console.error('‚ùå Failed to connect to the database:', error);
        process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    }
};
